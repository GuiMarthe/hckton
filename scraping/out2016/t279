{"Documento": "Tese de Doutorado", "Autor": "Aniche, Mauricio Finavaro (Catálogo USP)", "Nome completo": "Mauricio Finavaro Aniche", "E-mail": "mauricioaniche@gmail.com", "Unidade da USP": "Instituto de Matemática e Estatística", "Área do Conhecimento": "Ciência da Computação", "Data de Defesa": "2016-07-15", "Imprenta": "São Paulo, 2016", "Orientador": "Gerosa, Marco Aurélio (Catálogo USP)", "Banca examinadora": ["Gerosa, Marco Aurélio (Presidente)", "Guerra, Eduardo Martins", "Murta, Leonardo Gresta Paulino", "Sant'Anna, Cláudio Nogueira", "Treude, Christoph"], "Título em inglês": "Context-based code quality assessment", "Palavras-chave em inglês": ["Architectural roles", "Code metrics", "Code quality", "Code smells", "Software architecture", "Software engineering", "Software maintenance"], "Resumo em inglês": "Two tasks that software engineers constantly perform are writing code that is easy to evolve and maintain, and detecting poorly written pieces of code. For the former, software engineers commonly rely on well-known software architecture styles, such as Model-View-Controller (MVC). To the latter, they rely on code metrics and code smell detection approaches. However, up to now, these code metrics and code smell approaches do not take into account underlying architectureall classes are assessed as if they were the same. In practice, software developers know that classes differ in terms of responsibilities and implementation, and thus, we expect these classes to present different levels of coupling, cohesion, and complexity. As an example, in an MVC system, Controllers are responsible for the flow between the Model and the View, and Models are responsible for representing the systems business concepts. Thus, in this thesis, we evaluate the impact of architectural roles within a system architecture on code metrics and code smells.  We performed an empirical analysis in 120 open source systems, and interviewed and surveyed more than 50 software developers. Our findings show that each architectural role has a different code metric values distribution, which is a likely consequence of their specific responsibilities. Thus, we propose SATT, an approach that provides specific thresholds for architectural roles that are significantly different from others in terms of code smells.  We also show that classes that play a specific architectural role contain specific code smells, which developers perceive as problems, and can impact class' change- and defect-proneness. Based on our findings, we suggest that developers understand the responsibilities of each architectural role in their system architecture, so that code metrics and code smells techniques can provide more accurate feedback.", "Título em português": "Avaliação de qualidade de código baseada em contexto", "Palavras-chave em português": ["Arquitetura de software", "Engenharia de software", "Manutenção de software", "Maus cheiros de código", "Métricas de código", "Papéis arquiteturais", "Qualidade de código"], "Resumo em português": "Duas tarefas que desenvolvedores de software constantemente fazem são escrever código fácil de ser mantido e evoluído, e detectar pedaços de código problemáticos. Para a primeira tarefa, desenvolvedores comumente fazem uso de conhecidos padrões arquiteturais, como Model-View-Controller (MVC). Para a segunda tarefa, desenvolvedores fazem uso de métricas de código e estratégias de detecção de maus cheiros de código (code smells). No entanto, até o momento, métricas de código e estratégias de detecção de maus cheiros de código não levam em conta a arquitetura do software em análise. Isso significa que todas classes são avaliadas como se umas fossem iguais às outras. Na prática, sabemos que classes são diferentes em suas responsibilidades e implementação, e portanto, esperamos que elas variem em termos de acoplamento, coesão e complexidade. Por exemplo, em um sistema MVC, Controladores são responsáveis pelo fluxo entre a camada de Modelo e a camada de Visão, e Modelos representam a visão de negócios do sistema. Nesta tese, nós avaliamos o impacto dos papéis arquiteturais em técnicas de medição de métricas de código e de detecção de maus cheiros de código. Nós realizamos um estudo empírico em 120 sistemas de código aberto, e entrevistamos e realizamos questionários com mais de 50 desenvolvedores. Nossos resultados mostram que cada papel arquitetural possui distribuições diferentes de valores de métrica de código, consequência das diferentes responsabilidades de cada papel. Como consequência, propomos SATT, uma abordagem que provê thresholds específicos para papéis arquiteturais que são significantemente diferentes de outros em termos de métricas de código.  Mostramos também que classes que cumprem um papel arquitetural específico também contêm maus cheiros de código específicos. Esses maus cheiros são percebidos por desenvolvedores como problemas reais e podem fazer com que essas classes sejam mais modificadas e apresentem mais defeitos do que classes limpas. Sugerimos então que desenvolvedores entendam a arquitetura dos seus sistemas, bem como as responsabilidades de cada papel arquitetural  que as classes desempenham, para que tanto métricas de código quanto estratégias de detecção de maus cheiros de código possam prover um melhor retorno.", "Data de Publicação": "2016-09-13", "url": "http://www.teses.usp.br/teses/disponiveis/45/45134/tde-13092016-123733/pt-br.php"}
