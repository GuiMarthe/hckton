{"Documento": "Dissertação de Mestrado", "Autor": "Andrade, Stevão Alves de (Catálogo USP)", "Nome completo": "Stevão Alves de Andrade", "E-mail": "stevao@icmc.usp.br", "Unidade da USP": "Instituto de Ciências Matemáticas e de Computação", "Área do Conhecimento": "Ciências de Computação e Matemática Computacional", "Data de Defesa": "2016-04-08", "Imprenta": "São Carlos, 2016", "Orientador": "Delamaro, Márcio Eduardo (Catálogo USP)", "Banca examinadora": ["Delamaro, Márcio Eduardo (Presidente)", "Chaim, Marcos Lordello", "Masiero, Paulo Cesar"], "Título em português": "Execução paralela de programas como suporte ao teste de mutação", "Palavras-chave em português": ["Computação paralela", "Engenharia de software", "Engenharia de Software experimental", "Teste de mutação", "Teste de software"], "Resumo em português": "Teste de software desempenha um papel fundamental no processo de produção de um produto de software de qualidade. Com o passar dos anos, diversas técnicas e critérios de teste de software foram desenvolvidos a fim de estabelecer meios e métricas para guiar a criação de casos de teste efetivos, capazes de evidenciar defeitos no produto avaliado. Dentre os principais critérios para teste de software está o Teste de Mutação, que foi amplamente difundido e é tido como uma das abordagens mais eficazes para guiar a criação de conjuntos de casos de teste capazes de revelar defeitos em software. Entretanto, à medida que esse critério possui uma grande efetividade para revelar defeitos, ele peca pelo baixo poder de escalabilidade, o que acaba comprometendo diretamente a sua capacidade de aplicação. Neste sentido, diversos estudos foram desenvolvidos nesta área dedicando-se a aprimorar o seu desempenho e torná-lo uma alternativa viável para aplicação durante a fase de teste de software. Este trabalho apresenta indícios de que a utilização de estruturas complexas de processamento pode apoiar a aplicação do Teste de Mutação. Para tal, foi concebida uma arquitetura que possibilite a aplicação do Teste de Mutação em paralelo. Após a implementação da arquitetura foram avaliados cinco algoritmos de balanceamento de carga responsáveis por controlar a distribuição e execução do Teste de Mutação. Durante a avaliação experimental da arquitetura e dos algoritmos, observou-se que nos piores cenários avaliados foi possível atingir um ganho de desempenho acima de 70% em relação à aplicação sequencial convencional do Teste de Mutação enquanto nos melhores cenários o ganho de desempenho foi acima 95%, contudo, necessitando utilizar-se de uma infraestrutura mais robusta para a execução da arquitetura.", "Título em inglês": "Parallel execution of programs as support for mutation testing", "Palavras-chave em inglês": ["Experimental software engineering", "Mutation testing", "Parallel programing", "Software engineering", "Software testing"], "Resumo em inglês": "Software testing plays a fundamental role in the development process of quality software systems. Over the years, many software testing techniques and criteria were developed to provide means and metrics to guide the development of effective test cases, able to find defects on the product being assessed. Among major criteria for software testing is the mutation testing, which was broadly broadcast and is likely one of the most effective approaches for creating sets of test cases able to uncover software bugs. However, although mutating testing has a great effectiveness to uncover defects in a product, it suffers from low scalability, which directly compromises its applicability. In this sense, many studies were developed in this area aiming at improving the performance of that criterion and make it a viable alternative for its application throughout the software testing process. This work presents evidence that the use of complex structures of processing can support mutation testing application. For this, it was established an architecture that enables mutation testing to be performed in parallel. After implementing the architecture, five load balance algorithms to controlling the distribution and execution of mutation testing were analyzed. During the experimental evaluation of the architecture and algorithms, it was observed that in the worst evaluated scenarios it was possible to reach a gain in performance of up to 70% in comparison to the conventional application (sequential). In the best scenarios the gain was over 95% in exchange of using a more robust infrastructure for the execution of the architecture.", "Data de Publicação": "2016-11-21", "url": "http://www.teses.usp.br/teses/disponiveis/55/55134/tde-21112016-103423/pt-br.php"}
